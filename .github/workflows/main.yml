name: Checkout Code Example

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-west-1
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Check if code is checked out or not
      - name: List files
        run: ls -al

      # Setup Docker Build
      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v2

      # Build Docker image with multi-stage build
      - name: Build Docker image
        run: |
          docker build --file Dockerfile --tag github-action . 

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Log in to Amazon Public ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1    

      # 3. Push image to ECR
      - name: Push Docker image to ECR
        run: |
             aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin 551364857603.dkr.ecr.us-west-1.amazonaws.com
             docker tag github-action:latest 551364857603.dkr.ecr.us-west-1.amazonaws.com/github-action:latest
             docker push 551364857603.dkr.ecr.us-west-1.amazonaws.com/github-action:latest

     # Render ECS
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses:  aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          container-name: my-container
          image: 551364857603.dkr.ecr.us-west-1.amazonaws.com/github-action:latest

     #Deploy to ECS
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          service: ishi-svc
          cluster: My-cluster
          wait-for-service-stability: true

     # Integrate Testing Stage
      - name: Integration Tests
        run: |
         curl -f http://50.18.247.157 || exit 1 


      # Rollback in case of failure
      - name: Rollback
        if: failure()  # This step will only run if the previous steps fail
        run: |
          echo "Integration tests failed. Rolling back..."
          aws ecs update-service  --cluster my-cluster  --service my-service --force-new-deployment  --region us-west-1    

          
       

          
